const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const meoaw = require("meoaw.js");

let token = "";
let stream_url = "https://www.twitch.tv/your_channel"; // URL ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô Twitch)
let m_b = "https://cdn.discordapp.com/attachments/1111200766175227945/1117029533359542312/IMG_1255.jpg"; // ‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏ç‡πà
let m_i = "https://cdn.discordapp.com/attachments/1111200766175227945/1117028829349822514/1134-verified-animated.gif"; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ

module.exports = {
    name: '!‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏°',
    async execute(message) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('enterToken')
                .setLabel('üìã ‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('startStream')
                .setLabel('üé• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏°')
                .setStyle(ButtonStyle.Danger)
        );

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        await message.reply({
            content: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏°:',
            components: [row]
        });

        // ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        message.client.on('interactionCreate', async (interaction) => {
            if (!interaction.isButton()) return;

            if (interaction.customId === 'enterToken') {
                // ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô
                const modal = new ModalBuilder()
                    .setCustomId('tokenModal')
                    .setTitle('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô');
                const tokenInput = new TextInputBuilder()
                    .setCustomId('tokenInput')
                    .setLabel('‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
                    .setStyle(TextInputStyle.Short)
                    .setMaxLength(60);

                modal.addComponents(
                    new ActionRowBuilder().addComponents(tokenInput)
                );

                await interaction.showModal(modal);
            }

            if (interaction.customId === 'startStream') {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                if (!token) {
                    return interaction.reply({ content: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô!', flags: 64 });
                }

                await interaction.reply({
                    content: 'üé¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏°...',
                    flags: 64
                });

                // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ RichPresence ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÜ
                const client = new Client({
                    checkUpdate: false,
                    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] // ‡πÄ‡∏û‡∏¥‡πà‡∏° intents ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                });

                client.on('ready', async () => {
                    console.clear();
                    console.log(`${client.user.username} is online !`);

                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Stream ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RichPresence
                    const streamStatus = {
                        name: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÄ‡∏Å‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÜ!',
                        url: stream_url
                    };

                    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streaming ‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
                    await client.user.setPresence({
                        activities: [{
                            name: streamStatus.name,
                            type: 'STREAMING',
                            url: streamStatus.url,
                            assets: {
                                large_image: m_b,
                                small_image: m_i
                            }
                        }],
                        status: 'online'
                    });
                    await client.login(token); // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô
                });
            }
        });

        // ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡∏à‡∏≤‡∏Å Modal
        message.client.on('interactionCreate', async (interaction) => {
            if (!interaction.isModalSubmit()) return;

            if (interaction.customId === 'tokenModal') {
                token = interaction.fields.getTextInputValue('tokenInput'); // ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£

                await interaction.reply({ content: `‚úÖ ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß`, flags: 64 });
            }
        });
    }
};
